name: Build & Push Docker Images to ECR

on:
  push:
    branches:
      - master

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_FRONTEND: 446556758489.dkr.ecr.us-east-1.amazonaws.com/frontend
  ECR_BACKEND: 446556758489.dkr.ecr.us-east-1.amazonaws.com/backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build frontend Docker image
        run: docker build -t $ECR_FRONTEND ./frontend

      - name: Build backend Docker image
        run: docker build -t $ECR_BACKEND ./backend

      - name: Trivy scan - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_FRONTEND }}
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      - name: Trivy scan - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_BACKEND }}
          format: 'table'
          ignore-unfixed: true
        continue-on-error: true

      - name: Tag & push frontend
        run: |
          docker tag $ECR_FRONTEND $ECR_FRONTEND:latest
          docker push $ECR_FRONTEND

      - name: Tag & push backend
        run: |
          docker tag $ECR_BACKEND $ECR_BACKEND:latest
          docker push $ECR_BACKEND

  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get_ip.outputs.ec2_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      - name: Output EC2 IP
        working-directory: ./terraform
        id: get_ip
        run: |
          IP=$(terraform output -raw ec2_public_ip)
          echo "ec2_ip=${IP}" >> $GITHUB_OUTPUT





  configure-server:
    needs: provision-infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create ansible private key
        run: |
          mkdir -p ansible
          echo "${{ secrets.EC2_SSH_KEY }}" > ansible/ec2-pair.pem
          chmod 600 ansible/ec2-pair.pem

      - name: Run Ansible playbook
        env:
          EC2_IP: ${{ needs.provision-infrastructure.outputs.ec2_ip }}
        run: |
          echo "[web]" > ansible/inventory.yml
          echo "$EC2_IP ansible_user=ubuntu ansible_ssh_private_key_file=ansible/ec2-pair.pem" >> ansible/inventory.yml

          ansible-playbook -i ansible/inventory.yml ansible/webapp-config.yml
